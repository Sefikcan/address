// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/sefikcan/address-api/internal/common"

	mock "github.com/stretchr/testify/mock"

	request "github.com/sefikcan/address-api/internal/address/dto/request"

	response "github.com/sefikcan/address-api/internal/address/dto/response"
)

// AddressService is an autogenerated mock type for the AddressService type
type AddressService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *AddressService) Create(ctx context.Context, _a1 request.AddressCreateRequest) (*response.AddressResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *response.AddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.AddressCreateRequest) (*response.AddressResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.AddressCreateRequest) *response.AddressResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.AddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.AddressCreateRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *AddressService) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, page, pageSize
func (_m *AddressService) GetAll(ctx context.Context, page int, pageSize int) (*common.Pageable[response.AddressResponse], error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *common.Pageable[response.AddressResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*common.Pageable[response.AddressResponse], error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *common.Pageable[response.AddressResponse]); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Pageable[response.AddressResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *AddressService) GetById(ctx context.Context, id int) (*response.AddressResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *response.AddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*response.AddressResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *response.AddressResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.AddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, id, patchRequest
func (_m *AddressService) Patch(ctx context.Context, id int, patchRequest request.AddressPatchRequest) (*response.AddressResponse, error) {
	ret := _m.Called(ctx, id, patchRequest)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *response.AddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, request.AddressPatchRequest) (*response.AddressResponse, error)); ok {
		return rf(ctx, id, patchRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, request.AddressPatchRequest) *response.AddressResponse); ok {
		r0 = rf(ctx, id, patchRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.AddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, request.AddressPatchRequest) error); ok {
		r1 = rf(ctx, id, patchRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *AddressService) Update(ctx context.Context, _a1 request.AddressUpdateRequest) (*response.AddressResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *response.AddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.AddressUpdateRequest) (*response.AddressResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.AddressUpdateRequest) *response.AddressResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.AddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.AddressUpdateRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAddressService creates a new instance of AddressService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddressService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddressService {
	mock := &AddressService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
