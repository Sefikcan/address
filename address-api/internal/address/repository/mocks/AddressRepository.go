// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/sefikcan/address/address-api/internal/common"

	entity "github.com/sefikcan/address/address-api/internal/address/entity"

	mock "github.com/stretchr/testify/mock"
)

// AddressRepository is an autogenerated mock type for the AddressRepository type
type AddressRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, address
func (_m *AddressRepository) Create(ctx context.Context, address entity.Address) (entity.Address, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Address) (entity.Address, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Address) entity.Address); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(entity.Address)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *AddressRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, page, pageSize
func (_m *AddressRepository) GetAll(ctx context.Context, page int, pageSize int) (*common.Pageable[entity.Address], error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *common.Pageable[entity.Address]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*common.Pageable[entity.Address], error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *common.Pageable[entity.Address]); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Pageable[entity.Address])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *AddressRepository) GetById(ctx context.Context, id int) (entity.Address, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Address, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Address); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Address)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, address
func (_m *AddressRepository) Update(ctx context.Context, address entity.Address) (entity.Address, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Address) (entity.Address, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Address) entity.Address); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(entity.Address)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAddressRepository creates a new instance of AddressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddressRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddressRepository {
	mock := &AddressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
