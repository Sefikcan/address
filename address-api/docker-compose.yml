version: "3.8"

services:
  address-api:
    container_name: address-api
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - environment=PROD
    ports:
      - "3048:3048"
    depends_on:
      - postgresql
    volumes:
      - ./pkg/config:/root/pkg/config
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3048/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgresql:
    image: postgres:12-alpine
    container_name: api_postgresql
    ports:
      - "5432:5432"
    restart: always
    environment:
      - POSTGRES_USER=pg
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=address_db
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U pg -d address_db || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
    container_name: elasticsearch
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5601 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:

volumes:
  db:
  elasticsearch-data: