version: "3.8"

services:
  address-api:
    container_name: address-api
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - environment=PROD
    ports:
      - "3048:3048"
    depends_on:
      - postgresql
      - kafka
    volumes:
      - ./pkg/config:/root/pkg/config
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3048/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgresql:
    image: postgres:12-alpine
    container_name: api_postgresql
    ports:
      - "5432:5432"
    restart: always
    environment:
      - POSTGRES_USER=pg
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=address_db
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U pg -d address_db || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
    container_name: elasticsearch
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5601 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    container_name: prometheus_container
    image: prom/prometheus
    restart: unless-stopped
    ports:
      - "9000:9090"
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    container_name: grafana_container
    image: grafana/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources # data source configuration
      - grafana-data:/var/lib/deployments/grafana # used to save dashboards
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
      image: confluentinc/cp-kafka:7.4.0
      container_name: kafka
      ports:
        - "9092:9092"
      environment:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      depends_on:
        - zookeeper
      networks:
        - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    ports:
      - "9044:8080"
    depends_on:
      - kafka
    networks:
      - app-network

  redis:
    image: redis:6.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
networks:
  app-network:

volumes:
  db:
  elasticsearch-data:
  prometheus-data:
  grafana-data:
  kafka-volume:
  zookeeper-volume:
  redis-data: